<!doctype html>
<html class="no-js" lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Node-Rpi-Monitor</title>
    <link rel="stylesheet" href="css/app.css" />
    <link rel="stylesheet" href="css/monitor.css" />
    <script src="bower_components/modernizr/modernizr.js"></script>
  </head>
  <body>
    <div class="row">
      <div class="large-12 columns">
        <h3 class="text-center">Pi</h3>
      </div>
    </div>
    
    <div class="row">
       <div class="large-12 columns">
        <div class="panel grey">
          
          <p class="right">
            <span class="label">
              <i class="icon-temperature"></i>43Â°C
            </span>
            <span class="label secondary">
              <i class="icon-gauge"></i><%= cpu.cpus[0].speed %>
            </span>
          </p>      
          <h5>CPU <small><%= cpu.cpus[0].model %></small></h5>  
       
          <div class="chart cpu">

          </div>
        </div>
      </div>
    </div>

    <div class="row">

      <div class="large-6 columns">
        <div class="panel yellow">
          <h5>Hard drives</h5>
          <ul class="small-block-grid-<%= hdd.length%>">

            <% for(var i in hdd) { %>
              <li>
                <div class="chart hdd" data-used="<%= parseFloat(hdd[i].percent) %>">

                </div>
                <h5><%= i %> <br><small><%= hdd[i].free %> / <%= hdd[i].used %></small></h5>
              </li>
            <% } %>
          </ul>
        </div>
      </div>

      <div class="large-6 columns">
        <div class="panel orange">
          <h5>Memory <small>231.51 MB / 437.67 MB</small></h5>
          <div class="chart memory" data-used="<%= parseFloat(memory.percent) %>">
          </div>

          <div class="chart memory-usage">

          </div>
        </div>
      </div>
    </div>
    <div class="row">
       <div class="large-12 columns">
        <div class="panel grey">

          <ul class="small-block-grid-2">
            <li>
              <h5><%= os.type %> <%= os.arch %> <%= os.release %></h5>
              <h6><%= os.uptime %></h6>
            </li>
            <li>          
              <h5><%= network.hostname %></h5>
              <ul style="list-style-type:none;">
                <% for(var i in network) {
                  if(i !== 'hostname') {
                  %>
                  <li><%= i %>
                    <ul style="list-style-type:none;">
                    <% for(var j in network[i]) {%>
                      <li><%= network[i][j].address %> (<%= network[i][j].family %>) <span class="label secondary"><%= network[i][j].internal == true ? 'Internal' : 'External' %></span> 
                    <% } %>
                    </ul>
                  </li>

                <% }
                    } %>
              </ul>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <footer class="row">
      <div class="large-12 columns text-center">
        <small>
          <a href="//github.com/soyuka/node-rpi-monit">Node rpi monitor</a>
        </small>
        <br><br>
      </div>
    </footer>

    <script src="bower_components/jquery/jquery.js"></script>
    <script src="bower_components/foundation/js/foundation.min.js"></script>
    <script src="js/highcharts.js"></script>
    <script src="js/underscore.js"></script>
    <script src="js/app.js"></script>
    <script>
$(function () {

    Highcharts.setOptions({
        global: {
            useUTC: false
        },
        title: {
          style: {
            display: 'none'
          }
        },
        chart: {
          backgroundColor: 'rgba(0,0,0,0)',
          borderColor: 'rgba(0,0,0,0)',
          spacing: [0,0,0,0],
        },
        tooltip: {
          pointFormat: '{point.percentage:.1f}%'
        },
        credits: {
          enabled: false
        },
        plotOptions: {
          pie: {
            borderColor: 'rgba(0,0,0,0)',
            dataLabels: {
              enabled: false
            }
          },
          line: {
            enableMouseTracking: false,
            marker: {
              enabled: false,
            }
          },
          area: {
            states: {
              hover: {
                enabled: false
              }
            },
            marker: {
                enabled: false,
                symbol: 'circle',
                radius: 2,
                states: {
                    hover: {
                        enabled: false
                    },
                    select: {
                      enabled: false
                    }
                }
            }
          },
        },
        legend: {
          enabled: false
        },
    });
 
    $('.chart.hdd').each(function(i, e) {
      var used = parseFloat($(e).attr('data-used'));

      var datas = [
        ['Used', used], 
        ['Free', 100-used]
      ];

      $(e).highcharts({
        chart: {
          height: 150,
        },
        colors: ['#53777A', '#e6c04b'],
        series: [{
            type: 'pie',
            data: datas
        }]
    });
  });
    
  $('.chart.memory').highcharts({
     chart: {
        height: 50,
        width: 150,
        events: {
          load: function() {
            var self = this;

            //setInterval
            $.get('/memory', function(data) {

              self.series[0].setData([
                {name: "Used", y: parseFloat(data.percent)},
                {name: "Free", y: 100 - parseFloat(data.percent)}
              ], true);

            }, 'json');
          }
        } 
      },
      colors: ['#ECD078','#c24027'],
      tooltip: {
        positioner: function() {
          return { x: 0, y: 0 };
        },
        shadow: false,
        backgroundColor: 'rgba(0,0,0,0)',
        borderColor: 'rgba(0,0,0,0)'
      },
      series: [{
          type: 'pie'
      }]
  });


  var getMemoryUsage = function(self) {
    $.get('/stats/memory', function(data) {
      self.series[0].setData(data);
    }, 'json');
  };

  $('.chart.memory-usage').highcharts({
    chart: {
        height: 208,
        events: {
          load: function() {
            var self = this;
            
            getMemoryUsage(self);

            setInterval(function() {
              getMemoryUsage(self);
              
            }, <%= intervals.memory %>)
           
          }
        } 
      },
    colors: ['#ECD078'],
    tooltip: {
      enabled: false
    },
    xAxis: {
          type: 'datetime',
          tickPixelInterval: 100,
          lineColor: '#c24027',
          tickColor: '#c24027',
          labels: {
            style: {
              color: '#333'
            },
            formatter: function() {
              var date = new Date(this.value).toLocaleTimeString();
              return date;
            }
          },
      },
      yAxis: {
        title: {
          text: null
        },
        gridLineColor: '#c24027',
          tickColor: '#333',
        labels: {
          style: {
              color: '#333'
            },
          formatter: function() {
            return Math.round(this.value/1024/1024) + ' MB';
          }
        }
      },
    series: [{
      type: 'line',
    }]
  })

  var getCPUUsage = function(self) {
     $.get('/stats/cpu', function(data) {

      self.series[0].setData(data.temp);
      
      for(var i in data.loadavg) {
        var n = parseInt(i)+1;
        self.series[n].setData(data.loadavg[i].data);
      }
    }, 'json');
  }

  $('.chart.cpu').highcharts({
      chart: {
          type: 'area',
          height: 200,
          events: {
          load: function() {
              var self = this;
              
              getCPUUsage(self);

              setInterval(function() {
                getCPUUsage(self);
                
              }, <%= intervals.cpu %>)
             
            }
          } 
      },
      colors: ['#53777A','#542437','#D95B43'],
      xAxis: {
          type: 'datetime',
          tickPixelInterval: 100,
          labels: {
            formatter: function() {
              var date = new Date(this.value).toLocaleTimeString();
              return date;
                //return new Date(this.value).toLocalString();
            }
          },
      },
      yAxis: [{
        title: {
          text: null
        }
      }, {
        title: {
          text:null
        },
        gridLineColor: '#b6ab9e',

        min: 0,
        max: 100,
        opposite: true
      }],
      legend: {
        enabled: true,
      },
      tooltip: {
          enabled: false,
      },
      plotOptions: {
          line: {
            color: '#C02942'
          }
      },
      series : 
    [
      {
        name: "temp",
        yAxis: 1,
        zIndex: 5,
        type: "line",
      },
      {
         zIndex: 2,
          name: "1 min",
      },
      {
        zIndex: 3,
        name: "5 min",
      },
      {
        zIndex: 4,
        name: "10 min",
      }
    ]
  });

});

    </script>
  </body>
</html>
